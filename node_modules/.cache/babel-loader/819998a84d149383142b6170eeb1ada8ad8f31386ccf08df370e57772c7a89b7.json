{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\React p_2\\\\react_p2\\\\src\\\\components\\\\CalorieRecords-Section\\\\ListingSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport RecordList from './RecordList';\nimport styles from \"./ListingSection.module.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ListingSection = props => {\n  _s();\n  const {\n    allRecords\n  } = props;\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const dateChangeHandler = event => {\n    const selectedDate = new Date(event.target.value);\n\n    // تحقق من أن التاريخ صالح\n    if (!isNaN(selectedDate.getTime())) {\n      setCurrentDate(getDateFromString(record.date)(en));\n    } else {\n      console.error(\"Invalid date\");\n    }\n  };\n  const dateFilter = record => {\n    const recordDate = new Date(record.date);\n\n    // تحقق من أن التاريخ صالح قبل الفلترة\n    if (isNaN(recordDate.getTime())) {\n      console.error(\"Invalid record date:\", record.date);\n      return false;\n    }\n    return recordDate.getUTCDate() === currentDate.getUTCDate() && recordDate.getUTCMonth() === currentDate.getUTCMonth() && recordDate.getUTCFullYear() === currentDate.getUTCFullYear();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: styles[\"listing-picker-label\"],\n      htmlFor: \"listingDate\",\n      children: \"Select date\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"listingDate\",\n      type: \"date\",\n      value: currentDate.toISOString().split(\"T\")[0] // تأكد من أن currentDate هو كائن Date صالح\n      ,\n      className: styles[\"listing-picker-input\"],\n      onChange: dateChangeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RecordList, {\n      records: allRecords.filter(dateFilter)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ListingSection, \"jlRD8Xn8VFdQnzpYmYXrLX8M9Sw=\");\n_c = ListingSection;\nexport default ListingSection;\nvar _c;\n$RefreshReg$(_c, \"ListingSection\");","map":{"version":3,"names":["React","useState","RecordList","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","ListingSection","props","_s","allRecords","currentDate","setCurrentDate","Date","dateChangeHandler","event","selectedDate","target","value","isNaN","getTime","getDateFromString","record","date","en","console","error","dateFilter","recordDate","getUTCDate","getUTCMonth","getUTCFullYear","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","type","toISOString","split","onChange","records","filter","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/React p_2/react_p2/src/components/CalorieRecords-Section/ListingSection.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport RecordList from './RecordList';\r\nimport styles from \"./ListingSection.module.css\";\r\n\r\n const ListingSection = (props) => {\r\n  const { allRecords } = props;\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n  const dateChangeHandler = (event) => {\r\n    const selectedDate = new Date(event.target.value);\r\n\r\n    // تحقق من أن التاريخ صالح\r\n    if (!isNaN(selectedDate.getTime())) {\r\n      setCurrentDate(getDateFromString(record.date)(en));\r\n    } else {\r\n      console.error(\"Invalid date\");\r\n    }\r\n  };\r\n\r\n  const dateFilter = (record) => {\r\n    const recordDate = new Date(record.date);\r\n\r\n    // تحقق من أن التاريخ صالح قبل الفلترة\r\n    if (isNaN(recordDate.getTime())) {\r\n      console.error(\"Invalid record date:\", record.date);\r\n      return false;\r\n    }\r\n\r\n    return (\r\n      recordDate.getUTCDate() === currentDate.getUTCDate() &&\r\n      recordDate.getUTCMonth() === currentDate.getUTCMonth() &&\r\n      recordDate.getUTCFullYear() === currentDate.getUTCFullYear()\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <label className={styles[\"listing-picker-label\"]} htmlFor=\"listingDate\">\r\n        Select date\r\n      </label>\r\n      <input\r\n        id=\"listingDate\"\r\n        type=\"date\"\r\n        value={currentDate.toISOString().split(\"T\")[0]}  // تأكد من أن currentDate هو كائن Date صالح\r\n        className={styles[\"listing-picker-input\"]}\r\n        onChange={dateChangeHandler}\r\n      />\r\n      <RecordList records={allRecords.filter(dateFilter)} />\r\n    </>\r\n  );\r\n};\r\nexport default ListingSection;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,MAAM,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEhD,MAAMC,cAAc,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACjC,MAAM;IAAEC;EAAW,CAAC,GAAGF,KAAK;EAC5B,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAIa,IAAI,CAAC,CAAC,CAAC;EAE1D,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;IACnC,MAAMC,YAAY,GAAG,IAAIH,IAAI,CAACE,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC;;IAEjD;IACA,IAAI,CAACC,KAAK,CAACH,YAAY,CAACI,OAAO,CAAC,CAAC,CAAC,EAAE;MAClCR,cAAc,CAACS,iBAAiB,CAACC,MAAM,CAACC,IAAI,CAAC,CAACC,EAAE,CAAC,CAAC;IACpD,CAAC,MAAM;MACLC,OAAO,CAACC,KAAK,CAAC,cAAc,CAAC;IAC/B;EACF,CAAC;EAED,MAAMC,UAAU,GAAIL,MAAM,IAAK;IAC7B,MAAMM,UAAU,GAAG,IAAIf,IAAI,CAACS,MAAM,CAACC,IAAI,CAAC;;IAExC;IACA,IAAIJ,KAAK,CAACS,UAAU,CAACR,OAAO,CAAC,CAAC,CAAC,EAAE;MAC/BK,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEJ,MAAM,CAACC,IAAI,CAAC;MAClD,OAAO,KAAK;IACd;IAEA,OACEK,UAAU,CAACC,UAAU,CAAC,CAAC,KAAKlB,WAAW,CAACkB,UAAU,CAAC,CAAC,IACpDD,UAAU,CAACE,WAAW,CAAC,CAAC,KAAKnB,WAAW,CAACmB,WAAW,CAAC,CAAC,IACtDF,UAAU,CAACG,cAAc,CAAC,CAAC,KAAKpB,WAAW,CAACoB,cAAc,CAAC,CAAC;EAEhE,CAAC;EAED,oBACE3B,OAAA,CAAAE,SAAA;IAAA0B,QAAA,gBACE5B,OAAA;MAAO6B,SAAS,EAAE/B,MAAM,CAAC,sBAAsB,CAAE;MAACgC,OAAO,EAAC,aAAa;MAAAF,QAAA,EAAC;IAExE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACRlC,OAAA;MACEmC,EAAE,EAAC,aAAa;MAChBC,IAAI,EAAC,MAAM;MACXtB,KAAK,EAAEP,WAAW,CAAC8B,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAE,CAAE;MAAA;MACjDT,SAAS,EAAE/B,MAAM,CAAC,sBAAsB,CAAE;MAC1CyC,QAAQ,EAAE7B;IAAkB;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,eACFlC,OAAA,CAACH,UAAU;MAAC2C,OAAO,EAAElC,UAAU,CAACmC,MAAM,CAAClB,UAAU;IAAE;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACtD,CAAC;AAEP,CAAC;AAAC7B,EAAA,CA9CKF,cAAc;AAAAuC,EAAA,GAAdvC,cAAc;AA+CrB,eAAeA,cAAc;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}