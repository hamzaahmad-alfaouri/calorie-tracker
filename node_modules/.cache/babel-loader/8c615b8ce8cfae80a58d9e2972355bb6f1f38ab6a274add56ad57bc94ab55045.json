{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\React p_2\\\\react_p2\\\\src\\\\components\\\\CalorieRecords-Section\\\\ListingSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport RecordList from './RecordList';\nimport styles from \"./ListingSection.module.css\";\nimport { getDateFromString } from '../../utils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ListingSection = props => {\n  _s();\n  const {\n    allRecords\n  } = props;\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const dateChangeHandler = event => {\n    const selectedDate = new Date(event.target.value);\n\n    // تحقق من أن التاريخ صالح\n    if (!isNaN(selectedDate.getTime())) {\n      setCurrentDate(selectedDate);\n    } else {\n      console.error(\"Invalid date\");\n    }\n  };\n  const dateFilter = record => {\n    const recordDate = new Date(record.date);\n\n    // تحقق من أن التاريخ صالح قبل الفلترة\n    if (isNaN(recordDate.getTime())) {\n      console.error(\"Invalid record date:\", record.date);\n      return false;\n    }\n    return recordDate.getDate() === currentDate.getDate() && recordDate.getMonth() === currentDate.getMonth() && recordDate.getFullYear() === currentDate.getFullYear();\n  };\n  const formatDate = date => {\n    const timezoneOffset = date.getTimezoneOffset() * 60000;\n    const adjustedDate = new Date(date.getTime() - timezoneOffset);\n    return adjustedDate.toISOString().split(\"T\")[0];\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: styles[\"listing-picker-label\"],\n      htmlFor: \"listingDate\",\n      children: \"Select date\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"listingDate\",\n      type: \"date\",\n      value: formatDate(currentDate),\n      className: styles[\"listing-picker-input\"],\n      onChange: dateChangeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RecordList, {\n      records: allRecords.filter(dateFilter)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ListingSection, \"jlRD8Xn8VFdQnzpYmYXrLX8M9Sw=\");\n_c = ListingSection;\nexport default ListingSection;\nvar _c;\n$RefreshReg$(_c, \"ListingSection\");","map":{"version":3,"names":["React","useState","RecordList","styles","getDateFromString","jsxDEV","_jsxDEV","Fragment","_Fragment","ListingSection","props","_s","allRecords","currentDate","setCurrentDate","Date","dateChangeHandler","event","selectedDate","target","value","isNaN","getTime","console","error","dateFilter","record","recordDate","date","getDate","getMonth","getFullYear","formatDate","timezoneOffset","getTimezoneOffset","adjustedDate","toISOString","split","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","type","onChange","records","filter","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/React p_2/react_p2/src/components/CalorieRecords-Section/ListingSection.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport RecordList from './RecordList';\r\nimport styles from \"./ListingSection.module.css\";\r\nimport { getDateFromString } from '../../utils';\r\n\r\nconst ListingSection = (props) => {\r\n  const { allRecords } = props;\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n  const dateChangeHandler = (event) => {\r\n    const selectedDate = new Date(event.target.value);\r\n\r\n    // تحقق من أن التاريخ صالح\r\n    if (!isNaN(selectedDate.getTime())) {\r\n      setCurrentDate(selectedDate);\r\n    } else {\r\n      console.error(\"Invalid date\");\r\n    }\r\n  };\r\n\r\n  const dateFilter = (record) => {\r\n    const recordDate = new Date(record.date);\r\n\r\n    // تحقق من أن التاريخ صالح قبل الفلترة\r\n    if (isNaN(recordDate.getTime())) {\r\n      console.error(\"Invalid record date:\", record.date);\r\n      return false;\r\n    }\r\n\r\n    return (\r\n      recordDate.getDate() === currentDate.getDate() &&\r\n      recordDate.getMonth() === currentDate.getMonth() &&\r\n      recordDate.getFullYear() === currentDate.getFullYear()\r\n    );\r\n  };\r\n\r\n  const formatDate = (date) => {\r\n    const timezoneOffset = date.getTimezoneOffset() * 60000; \r\n    const adjustedDate = new Date(date.getTime() - timezoneOffset); \r\n    return adjustedDate.toISOString().split(\"T\")[0]; \r\n  };\r\n\r\n  return (\r\n    <>\r\n      <label className={styles[\"listing-picker-label\"]} htmlFor=\"listingDate\">\r\n        Select date\r\n      </label>\r\n      <input\r\n        id=\"listingDate\"\r\n        type=\"date\"\r\n        value={formatDate(currentDate)}\r\n        className={styles[\"listing-picker-input\"]}\r\n        onChange={dateChangeHandler}\r\n      />\r\n      <RecordList records={allRecords.filter(dateFilter)} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListingSection;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}