{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\React p_2\\\\react_p2\\\\src\\\\components\\\\CalorieRecords-Section\\\\ListingSection.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ListingSection = props => {\n  _s();\n  const {\n    allRecords\n  } = props;\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const dateChangeHandler = event => {\n    setCurrentDate(new Date(event.target.value));\n  };\n\n  // تحويل التاريخ إلى قيمة خالية من الوقت للمقارنة بشكل أدق وأسرع\n  const normalizeDate = date => {\n    const normalized = new Date(date);\n    normalized.setHours(0, 0, 0, 0); // إزالة أي وقت مرتبط بالتاريخ\n    return normalized;\n  };\n  const currentDateNormalized = normalizeDate(currentDate);\n  const dateFilter = record => {\n    const recordDateNormalized = normalizeDate(record.date);\n    return recordDateNormalized.getTime() === currentDateNormalized.getTime();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: styles[\"listing-picker-label\"],\n      htmlFor: \"listingDate\",\n      children: \"Select date\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"listingDate\",\n      type: \"date\",\n      value: currentDate.toISOString().split(\"T\")[0] // عرض التاريخ بتنسيق yyyy-mm-dd\n      ,\n      className: styles[\"listing-picker-input\"],\n      onChange: dateChangeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RecordList, {\n      records: allRecords.filter(dateFilter)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ListingSection, \"jlRD8Xn8VFdQnzpYmYXrLX8M9Sw=\");\n_c = ListingSection;\nexport default ListingSection;\nvar _c;\n$RefreshReg$(_c, \"ListingSection\");","map":{"version":3,"names":["ListingSection","props","_s","allRecords","currentDate","setCurrentDate","useState","Date","dateChangeHandler","event","target","value","normalizeDate","date","normalized","setHours","currentDateNormalized","dateFilter","record","recordDateNormalized","getTime","_jsxDEV","_Fragment","children","className","styles","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","type","toISOString","split","onChange","RecordList","records","filter","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/React p_2/react_p2/src/components/CalorieRecords-Section/ListingSection.js"],"sourcesContent":["const ListingSection = (props) => {\r\n  const { allRecords } = props;\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n  const dateChangeHandler = (event) => {\r\n    setCurrentDate(new Date(event.target.value));\r\n  };\r\n\r\n  // تحويل التاريخ إلى قيمة خالية من الوقت للمقارنة بشكل أدق وأسرع\r\n  const normalizeDate = (date) => {\r\n    const normalized = new Date(date);\r\n    normalized.setHours(0, 0, 0, 0); // إزالة أي وقت مرتبط بالتاريخ\r\n    return normalized;\r\n  };\r\n\r\n  const currentDateNormalized = normalizeDate(currentDate);\r\n\r\n  const dateFilter = (record) => {\r\n    const recordDateNormalized = normalizeDate(record.date);\r\n    return recordDateNormalized.getTime() === currentDateNormalized.getTime();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <label className={styles[\"listing-picker-label\"]} htmlFor='listingDate'>\r\n        Select date\r\n      </label>\r\n      <input\r\n        id='listingDate'\r\n        type=\"date\"\r\n        value={currentDate.toISOString().split(\"T\")[0]} // عرض التاريخ بتنسيق yyyy-mm-dd\r\n        className={styles[\"listing-picker-input\"]}\r\n        onChange={dateChangeHandler}\r\n      />\r\n      <RecordList records={allRecords.filter(dateFilter)} /> \r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListingSection;\r\n"],"mappings":";;;AAAA,MAAMA,cAAc,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAChC,MAAM;IAAEC;EAAW,CAAC,GAAGF,KAAK;EAC5B,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGC,QAAQ,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC;EAE1D,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;IACnCJ,cAAc,CAAC,IAAIE,IAAI,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC;EAC9C,CAAC;;EAED;EACA,MAAMC,aAAa,GAAIC,IAAI,IAAK;IAC9B,MAAMC,UAAU,GAAG,IAAIP,IAAI,CAACM,IAAI,CAAC;IACjCC,UAAU,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjC,OAAOD,UAAU;EACnB,CAAC;EAED,MAAME,qBAAqB,GAAGJ,aAAa,CAACR,WAAW,CAAC;EAExD,MAAMa,UAAU,GAAIC,MAAM,IAAK;IAC7B,MAAMC,oBAAoB,GAAGP,aAAa,CAACM,MAAM,CAACL,IAAI,CAAC;IACvD,OAAOM,oBAAoB,CAACC,OAAO,CAAC,CAAC,KAAKJ,qBAAqB,CAACI,OAAO,CAAC,CAAC;EAC3E,CAAC;EAED,oBACEC,OAAA,CAAAC,SAAA;IAAAC,QAAA,gBACEF,OAAA;MAAOG,SAAS,EAAEC,MAAM,CAAC,sBAAsB,CAAE;MAACC,OAAO,EAAC,aAAa;MAAAH,QAAA,EAAC;IAExE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACRT,OAAA;MACEU,EAAE,EAAC,aAAa;MAChBC,IAAI,EAAC,MAAM;MACXrB,KAAK,EAAEP,WAAW,CAAC6B,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAE,CAAC;MAAA;MAChDV,SAAS,EAAEC,MAAM,CAAC,sBAAsB,CAAE;MAC1CU,QAAQ,EAAE3B;IAAkB;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,eACFT,OAAA,CAACe,UAAU;MAACC,OAAO,EAAElC,UAAU,CAACmC,MAAM,CAACrB,UAAU;IAAE;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACtD,CAAC;AAEP,CAAC;AAAC5B,EAAA,CArCIF,cAAc;AAAAuC,EAAA,GAAdvC,cAAc;AAuCpB,eAAeA,cAAc;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}